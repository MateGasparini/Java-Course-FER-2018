package hr.fer.zemris.java.hw03;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import hr.fer.zemris.java.custom.scripting.nodes.DocumentNode;
import hr.fer.zemris.java.custom.scripting.nodes.ForLoopNode;
import hr.fer.zemris.java.custom.scripting.nodes.Node;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParser;
import hr.fer.zemris.java.custom.scripting.parser.SmartScriptParserException;

/**
 * Program which demonstrates the functionality of the
 * <code>SmartScriptParser</code> class. It takes a single
 * command line argument which specifies the path to a .txt
 * file. It parses the file (if it is valid), and prints out
 * the reconstructed text from the generated syntax tree.
 * 
 * IMPORTANT
 * Set the command line arguments to: examples/doc1.txt
 * to run the example from the homework assignment with an
 * added demonstration of working escape sequences.
 * 
 * @author Mate Gasparini
 */
public class SmartScriptTester {
	
	/**
	 * Main method which is called when the program starts.
	 * 
	 * @param args Command line arguments. Expecting one argument
	 * 			which is a valid filepath.
	 */
	public static void main(String[] args) {
		if (args.length != 1) {
			System.err.println(
				"Please provide only one argument (document filepath)."
			);
			System.exit(1);
		}
		
		String docBody = null;
		try {
			docBody = new String(
				Files.readAllBytes(Paths.get(args[0]))
			);
		} catch (IOException e1) {
			System.err.println("Invalid document filepath.");
			System.exit(1);
		}
		
		SmartScriptParser parser = null;
		
		try {
			parser = new SmartScriptParser(docBody);
		} catch (SmartScriptParserException e) {
			System.out.println("Unable to parse document!");
			System.exit(-1);
		} catch (Exception e) {
			System.out.println(
				"If this line ever executes, you have failed this class!"
			);
			System.exit(-1);
		}
		
		DocumentNode document = parser.getDocumentNode();
		String originalDocumentBody = createOriginalDocumentBody(document);
		
		// should write something like original content of docBody
		System.out.println(originalDocumentBody);
	}
	
	/**
	 * Returns the reconstructed text as a String.
	 * 
	 * @param document Document generated by the parser.
	 * @return Reconstructed input text.
	 */
	public static String createOriginalDocumentBody(DocumentNode document) {
		return getAllChildrenAsText(document);
	}
	
	/**
	 * Recursive function that constructs and combines all nodes
	 * as text.
	 * 
	 * @param parentNode Starting nodes
	 * @return Reconstructed text.
	 */
	private static String getAllChildrenAsText(Node parentNode) {
		StringBuilder builder = new StringBuilder();
		
		int numberOfChildren = parentNode.numberOfChildren();
		for (int i = 0; i < numberOfChildren; i ++) {
			Node child = parentNode.getChild(i);
			builder.append(child.toString());
			
			if (child instanceof ForLoopNode) {
				builder.append(getAllChildrenAsText(child));
				builder.append("{$ END $}");
			}
		}
		
		return builder.toString();
	}
}
